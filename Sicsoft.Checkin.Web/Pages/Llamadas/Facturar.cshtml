@page "{id}"
@model Boletaje.Pages.Llamadas.FacturarModel
@{
    ViewData["Title"] = "Generar Factura";
}
@using System.Globalization;
@using Microsoft.AspNetCore.Http
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Linq;
@using System.Security.Claims;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.Extensions.Configuration;
@using Refit;
@inject IHttpContextAccessor httpContextAccessor
@using Newtonsoft.Json;
@{
    var Roles = ((ClaimsIdentity)User.Identity).Claims.Where(d => d.Type == "Roles").Select(s1 => s1.Value).FirstOrDefault().Split("|");
}

@section breadcrumb {

    <li class="breadcrumb-item">
        <a asp-page="./Index">Facturas</a>
    </li>
    <li class="breadcrumb-item active">
        <a>Generar Factura</a>
    </li>

}
@using Newtonsoft.Json;
@section styles {
    <style>
        .input {
            width: 40%;
        }

        .input2 {
        }

        .badge {
            background-color: green;
            color: white;
            padding: 4px 8px;
            text-align: center;
            border-radius: 5px;
        }
    </style>

}
 @using System.Globalization;
@{
    NumberFormatInfo formato = new CultureInfo("en-US").NumberFormat;
    formato.CurrencyGroupSeparator = ",";
    formato.NumberDecimalSeparator = ".";


}
@section scripts
{

    <script>
        $(document).ready(function () {

            jQuery(document).ready(function ($) {
                $(document).ready(function () {
                });
            });
            RecuperarTipoCambio();
            Recuperar();
            //selectOpcional();

            //ModificaMoneda();
        });

        var CantidadInicial = parseFloat("@(Model.ProdHoras.FirstOrDefault() == null ? 1 : Model.ProdHoras.FirstOrDefault().CantidadInicial)");
        var Detalles = [];
        var ProductosHijos = [];
        var ProductosHijosInsertar = [];
        var ImpuestosS = [];
        var ManoObra = "";
        var RolAceptacion = false;
        var Rate = 0;
        var banderaConversion = false;
        var TipoCambio = [];
        var Exoneraciones = [];
        var CondicionesPagos = [];
        var ModificarProductos = '@(!string.IsNullOrEmpty(Roles.Where(a => a == "78").FirstOrDefault()))';

        function RecuperarTipoCambio() {

            try {
                fetch('https://apis.gometa.org/tdc/tdc.json?fbclid=IwAR1Wfr6SFwV8_0-x9n5JrjMmNTkOcUIWdekp1Sc6sFpTnIuP29ok-aVuQWI')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json(); // Parsea la respuesta como JSON
                    })
                    .then(data => {
                        // Maneja los datos obtenidos
                        console.log(data);
                        var det = {
                            Moneda: "USD",
                            TipoCambio: parseFloat(data.venta)
                        }
                        TipoCambio.push(det);
                    })
                    .catch(error => {
                        // Maneja errores
                        console.error('Fetch error:', error);
                    });
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }

        }

        function Recuperar() {
            try {
                var detalles = JSON.parse($("#Detalle").val());
                ManoObra = JSON.parse($("#ManoObra").val());
                ImpuestosS = JSON.parse($("#Impuestos").val());
                ProductosHijos = JSON.parse($("#ProductosHijos").val());
                ProductosHijosInsertar = JSON.parse($("#ProductosHijosInsertar").val());
                CB = JSON.parse($("#CB").val());
                Exoneraciones = JSON.parse($("#Exoneraciones").val());
                CondicionesPagos = JSON.parse($("#CondicionesPagos").val());
                for (var i = 0; i < ProductosHijos.length; i++) {
                    if (ProductosHijos[i] != undefined) {
                        if (ProductosHijosInsertar.indexOf(ProductosHijosInsertar.find(a => a.id == ProductosHijos[i].id)) > 0) {
                            ProductosHijosInsertar.splice(ProductosHijosInsertar.indexOf(ProductosHijosInsertar.find(a => a.id == ProductosHijos[i].id)), 1);

                        }
                    }

                }
                $("#EmailCliente").val("@Model.Factura.Correo");
                RolAceptacion = true;
                $("#Moneda").val("@Model.Factura.Moneda");
                console.log(detalles);
                for (var i = 0; i < detalles.length; i++) {
                    var IMP = ImpuestosS.find(a => a.id == detalles[i].idImpuesto);
                    var calculoIMP = IMP.Tarifa;

                    var detalle = {
                        id: detalles[i].id,
                        NumLinea: i + 1,
                        idEncabezado: 0,
                        idImpuesto: detalles[i].idImpuesto,
                        ItemCode: detalles[i].ItemCode,
                        ItemName: detalles[i].NomPro,
                        PrecioUnitario: parseFloat(detalles[i].PrecioUnitario),
                        Cantidad: detalles[i].Cantidad,
                        PorDescuento: detalles[i].PorDescuento,
                        Descuento: detalles[i].TotalDescuento,
                        Impuestos: detalles[i].TotalImpuestos,
                        TotalLinea: detalles[i].TotalLinea,
                        PorExoneracion: Exoneraciones.find(a => a.ItemCode == detalles[i].ItemCode) == undefined ? 0 : Exoneraciones.find(a => a.ItemCode == detalles[i].ItemCode).Prcnt,
                        idDocumentoExoneracion: Exoneraciones.find(a => a.ItemCode == detalles[i].ItemCode) == undefined ? 0 : Exoneraciones.find(a => a.ItemCode == detalles[i].ItemCode).DocEntry
                    };
                    var EX = Exoneraciones.find(a => a.ItemCode == detalle.ItemCode);
                    if (EX != undefined) {
                        if ((13 - EX.Prcnt) < calculoIMP) {
                            var ValorExonerado = (EX.Prcnt / 100);
                            var TarifaExonerado = ((detalle.Cantidad * detalle.PrecioUnitario) - detalle.Descuento) * ValorExonerado;
                            detalle.Impuestos -= TarifaExonerado;
                            detalle.PorExoneracion = EX.Prcnt;
                        }
                    }
                    Detalles.push(detalle);

                }
                $("#descGeneral").val(parseFloat("@Model.Factura.PorDesc"));
                RecuperarTipoCambio()
                RellenaTabla();
                ModificaMoneda(true);
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }



        }

        function RellenaTabla() {
            try {
                var btn = document.getElementById('agregaManoObra');

                var sOptions = '';

                $("#tbody").html('');

                for (var i = 0; i < Detalles.length; i++) {
                    var producto = ProductosHijos.filter(a => a.codSAP == Detalles[i].ItemCode)[0];
                    if (producto == undefined) {
                        producto = ProductosHijosInsertar.filter(a => a.codSAP == Detalles[i].ItemCode)[0];
                    }
                    var ganancia = 0;
                    var gananciaBruta = 0;
                    Rate = producto.Rate;



                    gananciaBruta = parseFloat(Detalles[i].PrecioUnitario) - producto.Costo;

                    ganancia = (gananciaBruta / parseFloat(Detalles[i].PrecioUnitario)) * 100;

                    sOptions += '<tr>'
                    if (ModificarProductos == "True") {
                        sOptions += '<td align="center "> <a style="margin-left: -1%; position: inherit !important;" onclick="javascript: EliminarLinea(' + i + ')" title="Eliminar" class="fa fa-trash icono"></a> </td>'

                    } else {
                        sOptions += '<td align="center "> </td>'

                    }
                    sOptions += '<td align="left ">' + Detalles[i].ItemCode + ' - ' + Detalles[i].ItemName + '</td>';
                    if (ModificarProductos == "True") {
                        sOptions += '<td align="right"> <input class="form-control input2" value="' + Detalles[i].PrecioUnitario + '" type="number" step="1" id="' + i + 'PrecioU" onchange="javascript: ModificaLinea(' + i + ', false)"/> </td>';
                        if (producto.Nombre.toUpperCase().includes("mano de obra".toUpperCase()) || ProductosHijos.filter(a => a.codSAP == Detalles[i].ItemCode)[0] == undefined) {
                            if (producto.Nombre.toUpperCase().includes("mano de obra".toUpperCase())) {
                                btn.disabled = true;

                            }
                            sOptions += '<td align="center"> <input class="form-control input2" value="' + Detalles[i].Cantidad + '" type="number" step="1" id="' + i + 'Cantidad" onchange="javascript: ModificaLinea(' + i + ', false)"/></td>';
                        } else {
                            sOptions += '<td align="center"> <input class="form-control input2" value="' + Detalles[i].Cantidad + '" type="number" step="1" id="' + i + 'Cantidad" onchange="javascript: ModificaLinea(' + i + ', false)"/></td>';

                            // sOptions += '<td align="center"> <p id="' + i + 'Cantidad">' + Detalles[i].Cantidad + '</p></td>';
                        }
                    } else {
                        sOptions += '<td align="right"> <input class="form-control input2" readonly disabled   value="' + Detalles[i].PrecioUnitario + '" type="number" step="1" id="' + i + 'PrecioU" onchange="javascript: ModificaLinea(' + i + ', false)"/> </td>';
                        sOptions += '<td align="center"> <input class="form-control input2"  value="' + Detalles[i].Cantidad + '" type="number" step="1" id="' + i + 'Cantidad" onchange="javascript: ModificaLinea(' + i + ', false)"/></td>';

                    }



                    sOptions += '<td align="center"><b>' + producto.Stock + '</b></td>';

                    sOptions += '<td align="center"> <select class=" form-control " id="' + i + 'impSelector" onchange="javascript: ModificaLinea(' + i + ', false)"> <option value="0"> Seleccione </option>';
                    for (var z = 0; z < ImpuestosS.length; z++) {
                        if (Detalles[i].idImpuesto == ImpuestosS[z].id) {
                            sOptions += '<option value="' + ImpuestosS[z].id + '" selected> ' + ImpuestosS[z].CodSAP + '</option>'

                        } else {
                            if (ImpuestosS[z].Tarifa == 13) {
                                sOptions += '<option selected value="' + ImpuestosS[z].id + '" > ' + ImpuestosS[z].CodSAP + '</option>'

                            } else {
                                sOptions += '<option value="' + ImpuestosS[z].id + '" > ' + ImpuestosS[z].CodSAP + '</option>'

                            }

                        }
                    }
                    sOptions += '</select> </td>';



                    sOptions += '<td align="right"> <p id="' + i + 'Imp">' + Detalles[i].Impuestos + '</p></td>';

                    var Exo = Exoneraciones.length == 0 ? "" : (Exoneraciones.find(a => a.ItemCode == Detalles[i].ItemCode) == undefined ? "" : Exoneraciones.find(a => a.ItemCode == Detalles[i].ItemCode).NumeroDocumento);
                    sOptions += '<td align="right"> <p id="' + i + 'Exo">' + Exo + '</p></td>';


                    sOptions += '<td align="right"> <input class="form-control input2" disabled readonnly value="' + Detalles[i].PorDescuento + '" type="number" step="1" id="' + i + 'PorDesc" onchange="javascript: ModificaLinea(' + i + ', false)"/> </td>';

                    sOptions += '<td align="right"> <p id="' + i + 'Desc">' + Detalles[i].Descuento + '</p></td>';
                    sOptions += '<td align="right"><p id="' + i + 'TLinea">' + Detalles[i].TotalLinea + '</p></td>';


                    sOptions += '<td align="right"><p id="' + i + 'ganancia"> ' + Math.round(ganancia * 100) / 100 + ' %</p> </td>';
                    sOptions += '<td align="right"><p id="' + i + 'gananciaM">' + producto.PorMinimo + ' %</p></td>';


                    sOptions += '</tr>'



                }
                $("#tbody").html(sOptions);

                // selectOpcional();


            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }



        }

        function ModificaLinea(i, ban) {
            try {
                var Impuestos = 0;
                var Descuentos = 0;
                var TotalLinea = 0;
                var Subtotal = 0;



                var producto = ProductosHijos.filter(a => a.codSAP == Detalles[i].ItemCode)[0];
                if (producto == undefined) {
                    producto = ProductosHijosInsertar.filter(a => a.codSAP == Detalles[i].ItemCode)[0];
                }
                var ganancia = 0;
                var gananciaBruta = 0;
                var banderaConverAntes = banderaConversion;
                if (ban == 'false' || ban == false) {
                    banderaConversion = false;
                }

                if (CantidadInicial > $("#" + i + "Cantidad").val()) {
                    $("#" + i + "Cantidad").val(CantidadInicial);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'La cantidad no puede ser menor a la ya pactada para este equipo'  

                    })
                }

                var TP = TipoCambio.find(a => a.Moneda == "USD");
                if (banderaConversion) {
                    var PrecioUnitario = parseFloat($("#" + i + "PrecioU").val());
                    if ($("#Moneda").val() == "COL") {
                        $("#" + i + "PrecioU").val((PrecioUnitario * TP.TipoCambio).toFixed(2))
                    } else {

                        $("#" + i + "PrecioU").val((PrecioUnitario / TP.TipoCambio).toFixed(4))

                    }
                }

                if (producto.Nombre.toUpperCase().includes("mano de obra".toUpperCase()) || ProductosHijos.filter(a => a.codSAP == Detalles[i].ItemCode)[0] == undefined) {
                    Subtotal = $("#" + i + "PrecioU").val() * $("#" + i + "Cantidad").val();

                } else {
                    Subtotal = $("#" + i + "PrecioU").val() * $("#" + i + "Cantidad").val();

                    // Subtotal = $("#" + i + "PrecioU").val() * $("#" + i + "Cantidad").text();

                }




                //if (banderaConversion) {
                if ($("#Moneda").val() == "COL") {
                    gananciaBruta = parseFloat($("#" + i + "PrecioU").val()) - (producto.Costo);

                } else {
                    var TP = TipoCambio.find(a => a.Moneda == "USD");
                    gananciaBruta = parseFloat($("#" + i + "PrecioU").val()) - (producto.Costo / TP.TipoCambio);


                }
                //} else {
                //    gananciaBruta = parseFloat($("#" + i + "PrecioU").val()) - (producto.Costo);
                //}

                ganancia = (gananciaBruta / parseFloat($("#" + i + "PrecioU").val())) * 100;
                Detalles[i].PrecioUnitario = parseFloat($("#" + i + "PrecioU").val());
                Descuentos = ($("#" + i + "PorDesc").val() / 100) * Subtotal;
                var idImpuesto = ImpuestosS.find(a => a.id == $("#" + i + "impSelector").val());
                var IMP = ImpuestosS.find(a => a.id == idImpuesto.id);
                var calculoIMP = IMP.Tarifa;

                if (idImpuesto != undefined) {
                    Detalles[i].idImpuesto = idImpuesto.id;
                    Impuestos = (Subtotal - Descuentos) * (idImpuesto.Tarifa / 100);

                    var EX = Exoneraciones.find(a => a.ItemCode == Detalles[i].ItemCode);
                    if (EX != undefined) {
                        if ((13 - EX.Prcnt) < calculoIMP) {
                            var ValorExonerado = (EX.Prcnt / 100);
                            var TarifaExonerado = ((Detalles[i].Cantidad * Detalles[i].PrecioUnitario) - Detalles[i].Descuento) * ValorExonerado;
                            Impuestos -= TarifaExonerado;
                            Detalles[i].PorExoneracion = EX.Prcnt;
                            Detalles[i].idDocumentoExoneracion = EX.DocEntry;
                        }
                    }

                } else {
                    Impuestos = 0;
                }
                TotalLinea = (Subtotal - Descuentos) + Impuestos;


               

                if (producto.Nombre.toUpperCase().includes("mano de obra".toUpperCase()) || ProductosHijos.filter(a => a.codSAP == Detalles[i].ItemCode)[0] == undefined) {
                    Detalles[i].Cantidad = $("#" + i + "Cantidad").val();

                } else {
                    Detalles[i].Cantidad = $("#" + i + "Cantidad").val();

                    // Detalles[i].Cantidad = $("#" + i + "Cantidad").text();

                }
                Detalles[i].PorDescuento = $("#" + i + "PorDesc").val();
                Detalles[i].Descuento = Descuentos;
                Detalles[i].Impuestos = Impuestos;
                Detalles[i].TotalLinea = TotalLinea;

                $("#" + i + "TLinea").text(TotalLinea.toFixed(2));
                $("#" + i + "Desc").text(Descuentos.toFixed(2));
                $("#" + i + "Imp").text(Impuestos.toFixed(2));
                $("#" + i + "ganancia").text(ganancia.toFixed(2) + " %");

                if (ganancia < producto.PorMinimo) {
                    $("#" + i + "ganancia").css("color", "red");
                } else {
                    $("#" + i + "ganancia").css("color", "green");

                }
                banderaConversion = banderaConverAntes;
                ModificaTodo();
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }

        }

        function ModificaTodo() {
            try {
                var SubTotal = 0;
                var Descuentos = 0;
                var Impuestos = 0;
                var Total = 0;
                var PorDescuento = 0;

                PorDescuento = $("#descGeneral").val();
                for (var i = 0; i < Detalles.length; i++) {
                    var ImpLocal = parseFloat($("#" + i + "Imp").text());


                    var DescuentoLocal = parseFloat($("#" + i + "Desc").text());

                    var TotalLocal = parseFloat($("#" + i + "TLinea").text());

                    var subtotalLocal = (TotalLocal - ImpLocal);
                    SubTotal += subtotalLocal;
                    Impuestos += ImpLocal;
                    Total += subtotalLocal + ImpLocal;

                }

                if (PorDescuento > 0) {
                    Descuentos = SubTotal * (PorDescuento / 100);
                    Impuestos = (SubTotal - Descuentos) * 0.13;
                    Total = (SubTotal - Descuentos) + Impuestos;
                }

                $("#SubtotalGeneral").text(SubTotal.toFixed(2));
                $("#DescGeneral").text(Descuentos.toFixed(2));
                $("#ImpGeneral").text(Impuestos.toFixed(2));
                $("#TotalGeneral").text(Total.toFixed(2));

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }

        }

        function Validar(recibido) {
            try {
                var bandera = true;

                if (recibido.Correo == "") {
                    bandera = false;
                } else {
                    if (!validarCorreo(recibido.Correo)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Correo invalido '

                        });

                        bandera = false;
                    }
                }
                if (recibido.Cedula == "") {
                    bandera = false;
                }
                var TP = TipoCambio.find(a => a.Moneda == "USD");
                for (var i = 0; i < recibido.Detalle.length; i++) {
                    var producto = ProductosHijos.filter(a => a.codSAP == recibido.Detalle[i].ItemCode)[0];
                    if (producto == undefined) {
                        producto = ProductosHijosInsertar.filter(a => a.codSAP == recibido.Detalle[i].ItemCode)[0];
                    }
                    var ganancia = 0;
                    var gananciaBruta = 0;
                    if ($("#Moneda").val() == "USD") {
                        gananciaBruta = parseFloat($("#" + i + "PrecioU").val()) - (producto.Costo / TP.TipoCambio);
                    } else {
                        var TP = TipoCambio.find(a => a.Moneda == "USD");
                        gananciaBruta = (parseFloat($("#" + i + "PrecioU").val())) - producto.Costo;
                    }



                    ganancia = (gananciaBruta / parseFloat($("#" + i + "PrecioU").val())) * 100;


                    if (ganancia < producto.PorMinimo) {
                        bandera = false;
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Los margenes de ganancia no son correcto, favor verificar '

                        });
                    }


                }

                return bandera;
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }

        }
        function ImprimirTiqueteC(Documento, DetFactura) {
            try {



                var ventana = window.open('', 'PRINT', 'height=400,width=600');
                var texto = htmlContado;
                texto = texto.replace("$Fecha", Documento.fecha.split("T")[0] + " " + Documento.fecha.split("T")[1].substring(0, 8));
                texto = texto.replace("$NumInterno", Documento.id);
                texto = texto.replace("$CodSuc", "");
                texto = texto.replace("$NumComprobante", Documento.consecutivoHacienda);
                texto = texto.replace("$NumFactura", Documento.id);
                texto = texto.replace("$Comentario", Documento.comentarios);

                var cond = CondicionesPagos.find(a => a.id == $("#condPago").val());
                texto = texto.replace("$selectCondPago", cond.Nombre);


               
                 
                texto = texto.replace("$CodCliente", " " + "@Model.Cliente.CardCode");


                texto = texto.replace("$NombreCliente", "@Model.Cliente.CardName");
                texto = texto.replace("$Vendedor", "");


                var tabla = "";

                for (var i = 0; i < DetFactura.length; i++) {



                    tabla += "<tr>" + "<td colspan='3'>  " + DetFactura[i].ItemCode + "-" + DetFactura[i].NomPro + "  </td></tr>";


                    tabla += "<tr>";

                    tabla += "<td style='text-align left;'>" + DetFactura[i].Cantidad + " </td>";

                    tabla += "<td style='text-align left;'>" + formatoDecimal(DetFactura[i].PrecioUnitario) + " </td>";
                    tabla += "<td style='text-align left;'>" + formatoDecimal(DetFactura[i].TotalLinea) + " </td>";




                    tabla += "</tr>";

                }
                texto = texto.replace("$Tabla", tabla);

                if (Documento.moneda == "COL") {
                    texto = texto.replace("$SubTotal", "₡" + formatoDecimal(Documento.subtotal));
                    texto = texto.replace("$TotalDescuento", "₡" + formatoDecimal(Documento.totalDescuento));
                    texto = texto.replace("$TotalImpuestos", "₡" + formatoDecimal(Documento.totalImpuestos));
                    texto = texto.replace("$Redondeo", "₡" + "");
                    texto = texto.replace("$Total", "₡" + formatoDecimal(Documento.totalCompra));
                } else {
                    texto = texto.replace("$SubTotal", "$" + formatoDecimal(Documento.subtotal));
                    texto = texto.replace("$TotalDescuento", "$" + formatoDecimal(Documento.totalDescuento));
                    texto = texto.replace("$TotalImpuestos", "$" + formatoDecimal(Documento.totalImpuestos));
                    texto = texto.replace("$Redondeo", "$" + "");
                    texto = texto.replace("$Total", "$" + formatoDecimal(Documento.totalCompra));
                }




                ventana.document.write(texto);
                ventana.document.close();
                ventana.focus();
                ventana.print();
                ventana.close();
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }
        function Generar(generar) {
            try {
                var btn = document.getElementById('botonG');

                btn.disabled = true;

                var DetFactura = [];

                for (var i = 0; i < Detalles.length; i++) {
                    var detfac = {
                        ItemCode: Detalles[i].ItemCode,
                        NomPro: Detalles[i].ItemName,
                        idImpuesto: Detalles[i].idImpuesto,
                        Cantidad: Detalles[i].Cantidad,
                        PrecioUnitario: Detalles[i].PrecioUnitario,
                        PorDescto: Detalles[i].PorDescuento == "" ? 0 : Detalles[i].PorDescuento,
                        TotalDescuento: Detalles[i].Descuento,
                        TotalImpuestos: Detalles[i].Impuestos,
                        TotalLinea: Detalles[i].TotalLinea,
                        idDocumentoExoneracion: Detalles[i].idDocumentoExoneracion
                    };

                    DetFactura.push(detfac);

                }

                var recibido =
                {
                    id: 0,
                    idEntrega: parseInt("@Model.Factura.idEntrega"),
                    idCondicionVenta: $("#condPago").val(),
                    idPlazoCredito: $("#plazoPago").val(),
                    CardCode: "@Model.Factura.CardCode",
                    NombreCliente: "@Model.Factura.NombreCliente",
                    NumLlamada: "@Model.Factura.NumLlamada",
                    TipoDocumento: "01",
                    Cedula: $("#CedulaCliente").val(),
                    Correo: $("#EmailCliente").val(),
                    Moneda: $("#Moneda").val(),
                    TipoCambio: TipoCambio[0].TipoCambio,
                    Comentarios: $("#comentarios").val(),
                    Subtotal: $("#SubtotalGeneral").text(),
                    TotalImpuestos: $("#ImpGeneral").text(),
                    TotalDescuento: $("#DescGeneral").text(),
                    TotalCompra: $("#TotalGeneral").text(),
                    PorDesc: $("#descGeneral").val(),
                    ItemCode: "@Model.ItemCodeFacturar",
                    SerieFacturar: "@Model.SerieFacturar",
                    Detalle: DetFactura,
                    Metodos: MetodosPagosAbonos

                }

                if (Validar(recibido)) {
                    Swal.fire({
                        title: '¿Desea guardar los cambios?',
                        showDenyButton: true,
                        showCancelButton: false,
                        confirmButtonText: `Aceptar`,
                        denyButtonText: `Cancelar`,
                        customClass: {
                            confirmButton: 'swalBtnColor',
                            denyButton: 'swalDeny'
                        },
                    }).then((result) => {
                        if (result.isConfirmed) {
                            var recibidos = JSON.stringify(recibido);
                            var jsonString = JSON.stringify(recibido);
                            // Comprimir la cadena JSON utilizando gzip
                            var compressedData = pako.gzip(jsonString);

                            // Convertir los datos comprimidos a un ArrayBuffer (opcional, depende de tu caso de uso)
                            var compressedArrayBuffer = compressedData.buffer;

                            $.ajax({
                                type: 'POST',

                                url: '@Url.Page("Facturar", "Generar")',
                                dataType: 'json',
                                contentType: 'application/json',
                                data: compressedArrayBuffer,
                                processData: false,
                                headers: {
                                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                                },
                                success: function (json) {

                                    $("#divProcesando").hide();

                                    if ($('.modal-backdrop').is(':visible')) {

                                        $('body').removeClass('modal-open');
                                        $('.modal-backdrop').hide();
                                    }
                                    console.log("resultado " + json.mensaje);
                                    if (json.success == true) {

                                        ImprimirTiqueteC(json.documento, DetFactura);
                                        Swal.fire({
                                            title: "Ha sido generado con éxito",

                                            icon: 'success',
                                            showCancelButton: false,

                                            confirmButtonText: 'OK',
                                            customClass: {
                                                confirmButton: 'swalBtnColor',

                                            },
                                        }).then((result) => {
                                            if (result.isConfirmed) {

                                                //location.reload();
                                                window.location.href = window.location.href.split("/Facturar")[0].split("/Llamadas")[0] + '/Facturas';
                                            }
                                        })

                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Oops...',
                                            text: 'Ha ocurrido un error al intentar guardar ' + json.mensaje

                                        })
                                    }
                                },

                                beforeSend: function (xhr) {

                                    $("#divProcesando").modal("show");
                                },
                                complete: function () {

                                },
                                error: function (error) {
                                    $("#divProcesando").hide();

                                    if ($('.modal-backdrop').is(':visible')) {

                                        $('body').removeClass('modal-open');
                                        $('.modal-backdrop').hide();
                                    }
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: 'Ha ocurrido un error al intentar guardar ' + error

                                    })
                                }
                            });
                        }
                        else {
                            btn.disabled = false;

                        }

                    }
                    )
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Parece que faltan datos por rellenar o correo invalido'

                    })
                }




                btn.disabled = false;
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }


        }

        function ModificaMoneda(ban) {
            try {
                if ($("#Moneda").val() == "COL") {
                    banderaConversion = true;

                    $(".moneda").text("₡");
                } else {
                    banderaConversion = true;
                    $(".moneda").text("$")
                }
                if (!ban) {
                    for (var i = 0; i < Detalles.length; i++) {
                        ModificaLinea(i, "true");

                    }
                } else {
                    for (var i = 0; i < Detalles.length; i++) {
                        ModificaLinea(i, "false");

                    }
                }

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }

        }

        function MeterManoObra() {
            try {
                var btn = document.getElementById('agregaManoObra');
                btn.disabled = true;
                var Precio = 0;
                if ($("#Moneda").val() != "COL") {
                    Precio = ManoObra.Precio / ManoObra.Rate;
                } else {
                    Precio = ManoObra.Precio;
                }
                var detalle = {
                    id: ManoObra.id,
                    idError: 0,
                    NumLinea: Detalles.length + 1,
                    idEncabezado: 0,
                    ItemCode: ManoObra.codSAP,
                    ItemName: ManoObra.Nombre,
                    PrecioUnitario: Precio,
                    Cantidad: 1,
                    PorDescuento: 0,
                    Descuento: 0,
                    Impuestos: 0,
                    TotalLinea: 0,
                    Garantia: false,
                    Opcional: false
                };
                Detalles.push(detalle);
                RellenaTabla();

                var posicion = Detalles.indexOf(Detalles.find(a => a.ItemCode == detalle.ItemCode));
                ModificaLinea(posicion, "false");

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
            }

        }

    </script>


    <script>
        var DetallePago = [];
        var ProdCB = [];
        var CB = [];
        var MetodosPagosAbonos = [];
        function cantidadRepetidos(palabra, separador) {


            return palabra.split(separador).length - 1;
        }
        function ReplaceLetra(palabra) {
            var cantidad = cantidadRepetidos(palabra, ",");
            for (var i = 0; i < cantidad; i++) {
                palabra = palabra.replace(",", "");
            }

            //var cantidad2 = cantidadRepetidos(palabra, ".");
            //for (var i = 0; i < cantidad2; i++) {
            //    palabra = palabra.replace(".", "");
            //}
            return palabra;
        }
        function onChangeProducto() {
            try {
                var idB = $("#Busqueda").val().toString().split("_")[0].trim();

                var Prod = ProductosHijosInsertar.find(a => a.id == parseInt(idB));
                $("#id").text(idB);
                $("#Nombre").text(Prod.codSAP + " - " + Prod.Nombre);
                $("#cantidad").text(Prod.Stock);

                $("#Busqueda").val("");
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error ' + e

                })
            }

        }
        function LimpiarDatos() {
            try {
                $("#id").text("");
                $("#Nombre").text("");
                $("#cantidad").text("");

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error ' + e + ' - ' + e.stack

                })
            }
        }

        function InsertarProductoTabla() {
            try {

                if (ValidarAntesTabla()) {

                    var idB = $("#id").text();
                    var Prod = ProductosHijosInsertar.find(a => a.id == parseInt(idB));

                    var TP = TipoCambio.find(a => a.Moneda == "USD");



                    var detalle = {
                        id: 0,
                        NumLinea: Detalles.length + 1,
                        idEncabezado: 0,
                        idImpuesto: 0,
                        ItemCode: Prod.codSAP,
                        ItemName: Prod.Nombre,
                        PrecioUnitario: $("#Moneda").val() == "COL" ? Prod.Precio.toFixed(2) : (Prod.Precio / TP.TipoCambio).toFixed(2),
                        Cantidad: 1,
                        PorDescuento: 0,
                        Descuento: 0,
                        Impuestos: 0,
                        TotalLinea: 0,
                        PorExoneracion: 0,
                        idDocumentoExoneracion: 0
                    };
                    Detalles.push(detalle);

                    RellenaTabla();
                    LimpiarDatos();

                    var posicion = Detalles.indexOf(Detalles.find(a => a.ItemCode == detalle.ItemCode));
                    ModificaLinea(posicion, "false");
                }
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error ' + e + ' - ' + e.stack

                })
            }

        }
        function ValidarAntesTabla() {
            try {
                if ($("#Nombre").text().trim() == "") {
                    return false;
                }
                //else if (parseInt($("#cantidad").text()) <= 0) {
                //    Swal.fire({
                //        icon: 'error',
                //        title: 'Oops...',
                //        text: 'Producto sin stock'

                //    })
                //    return false;
                //}
                else {
                    return true;
                }

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })
                return false;
            }
        }

        function EliminarLinea(i) {
            try {
                var btn = document.getElementById('agregaManoObra');

                var producto = ProductosHijos.filter(a => a.codSAP == Detalles[i].ItemCode)[0];
                if (producto != undefined) {
                    if (producto.Nombre.toUpperCase().includes("mano de obra".toUpperCase())) {
                        btn.disabled = false;
                    }
                }
                Detalles.splice(i, 1);
                RellenaTabla();
                for (var i = 0; i < Detalles.length; i++) {
                    ModificaLinea(i, "false");

                }
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })

            }
        }

        function DevuelveTotal() {
            try {
                var total = 0;
                for (var i = 0; i < Detalles.length; i++) {
                    total += Detalles[i].TotalLinea;
                }
                var descuento = parseFloat($("#DescGeneral").text());
                total = parseFloat($("#TotalGeneral").text());
                return total;
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error  ' + e

                })

            }
        }

    </script>
    <script>
        function AbrirPago() {
            try {
                var TipodeCambio = TipoCambio.find(a => a.Moneda == "USD");
                $(".MetodosPagoRellenar").hide();
                var totalG = parseFloat(ReplaceLetra($("#TotalGeneral").text()));

                if ($("#Moneda").val() != "COL") {
                    totalG = totalG * TipodeCambio.TipoCambio;
                }

                $("#TipCam").val(TipodeCambio.TipoCambio);

                var CondicionActual = $("#condPago").val();
                var Cond = CondicionesPagos.find(a => a.id == CondicionActual);

                if (Cond.Dias == 0) {
                    if ($("#Moneda").val() == "COL") {
                        var Total = parseFloat(ReplaceLetra($("#TotalGeneral").text()));
                        $("#totPago").text(formatoDecimal(Total));
                        $("#fatPago").text(formatoDecimal(Total));
                        $("#selectMonedaP").val($("#Moneda").val());


                        $("#totPagoD").text(formatoDecimal(Total / TipodeCambio.TipoCambio));
                        $("#fatPagoD").text(formatoDecimal(Total / TipodeCambio.TipoCambio));


                        onChangeMetodo();
                        RellenaCB();


                        $("#modalPagos").modal("show");
                    } else {
                        var Total = parseFloat(ReplaceLetra($("#TotalGeneral").text()));
                        $("#totPagoD").text(formatoDecimal(Total));
                        $("#fatPagoD").text(formatoDecimal(Total));
                        $("#selectMonedaP").val($("#Moneda").val());


                        $("#totPago").text(formatoDecimal(Total * TipodeCambio.TipoCambio));
                        $("#fatPago").text(formatoDecimal(Total * TipodeCambio.TipoCambio));


                        onChangeMetodo();
                        RellenaCB();
                        $("#modalPagos").modal("show");
                    }
                } else {
                    Generar();
                }




            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error al intentar abrir pagos ' + e

                })
            }
        }

        function RellenaCB() {
            try {
                var text = '';
                $("#CuentaB").html(text);
                var Moneda2 = $("#selectMonedaP").val();
                var Metodo = $("#MetodoSeleccionado").val();
                var Cuenta = CB.filter(a => a.Moneda == Moneda2 && a.Tipo == Metodo && a.Estado == true);

                for (var i = 0; i < Cuenta.length; i++) {

                    text += "<option value= '" + Cuenta[i].id + "' > " + Cuenta[i].Nombre + " </option>";
                }

                $("#CuentaB").html(text);


            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error al intentar abrir pagos ' + e

                })
            }
        }
        function onChangeMetodo() {
            try {
                var Metodo = $("#MetodoSeleccionado").val();
                var Moneda = $("#selectMonedaP").val();
                var MonedaDoc = $("#Moneda").val();
                // var Total = parseFloat(ReplaceLetra($("#TotalGeneral").text())) - parseFloat(ReplaceLetra($("#pagPago").text()));
                var Total = 0;
                if ($("#MetodoSeleccionado").val() != '0') {
                    $(".MetodosPagoRellenar").show();

                } else {
                    $(".MetodosPagoRellenar").hide();

                }
                if (MonedaDoc == "COL") {
                    if (Moneda != MonedaDoc) {
                        Total = parseFloat(ReplaceLetra($("#fatPagoD").text()));
                    } else {
                        Total = parseFloat(ReplaceLetra($("#fatPago").text()));
                    }
                } else {
                    if (Moneda != MonedaDoc) {
                        Total = parseFloat(ReplaceLetra($("#fatPago").text()));
                    } else {
                        Total = parseFloat(ReplaceLetra($("#fatPagoD").text()));
                    }
                }
                $("#MontoPago").val(Total);

                switch (Metodo) {
                    case "Efectivo":
                        {
                            $(".TARJETADIV").hide();
                            $(".OTRODIV").hide();
                            $(".CHEQUEDIV").hide();
                            $(".EFECTIVODIV").show();
                            $(".TRANSFERENCIADIV").hide();
                            $(".CUENTADIV").show();

                            if (Moneda != MonedaDoc) {

                                $("#PagadoCon").val(Total);
                            }

                            RellenaCB();
                            break;
                        }
                    case "Tarjeta":
                        {
                            $(".OTRODIV").hide();
                            $(".EFECTIVODIV").hide();

                            $(".TARJETADIV").show();
                            $(".TRANSFERENCIADIV").show();
                            $(".CHEQUEDIV").hide();
                            $(".CUENTADIV").show();
                            RellenaCB();
                            break;
                        }
                    case "Transferencia":
                        {
                            $(".OTRODIV").hide();
                            $(".EFECTIVODIV").hide();

                            $(".TARJETADIV").hide();
                            $(".CHEQUEDIV").hide();
                            $(".TRANSFERENCIADIV").show();
                            $(".CUENTADIV").show();
                            RellenaCB();
                            break;
                        }
                    case "Cheque":
                        {
                            $(".OTRODIV").hide();
                            $(".EFECTIVODIV").hide();

                            $(".TARJETADIV").hide();
                            $(".CHEQUEDIV").show();
                            $(".TRANSFERENCIADIV").hide();
                            $(".CUENTADIV").hide();
                            RellenaCB();
                            break;
                        }
                    case "Otros":
                        {
                            $(".EFECTIVODIV").hide();

                            $(".TARJETADIV").hide();
                            $(".CHEQUEDIV").hide();
                            $(".OTRODIV").show();
                            $(".TRANSFERENCIADIV").hide();
                            $(".CUENTADIV").show();
                            RellenaCB();
                            break;
                        }

                    case "Pago a Cuenta":
                        {
                            $(".OTRODIV").hide();
                            $(".EFECTIVODIV").hide();

                            $(".TARJETADIV").hide();
                            $(".CHEQUEDIV").hide();
                            $(".TRANSFERENCIADIV").show();
                            $(".CUENTADIV").show();
                            RellenaCB();
                            break;
                        }
                    default:
                        {
                            $(".EFECTIVODIV").hide();

                            $(".TARJETADIV").hide();
                            $(".OTRODIV").hide();
                            $(".CHEQUEDIV").hide();
                            RellenaCB();
                            break;
                        }

                }


                onChangeMonedaP();
            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }
        function insertarPago() {
            try {
                var Moneda = $("#selectMonedaP").val();
                var MonedaDoc = $("#Moneda").val();
                var Metodo = $("#MetodoSeleccionado").val();
                var TipodeCambio = TipoCambio.find(a => a.Moneda == "USD");
                if (validarMetodo()) {
                    switch (Metodo) {
                        case "Efectivo":
                            {


                                var Detalle = {
                                    id: 0,
                                    idEncabezado: 0,
                                    idCuentaBancaria: $("#CuentaB").val(),
                                    Monto: parseFloat(ReplaceLetra($("#MontoPago").val())),
                                    // Monto: Moneda == MonedaDoc ? parseFloat(ReplaceLetra($("#MontoPago").val())) : Moneda != "COL" ? parseFloat(ReplaceLetra($("#MontoPago").val())) / TipodeCambio.TipoCambio : parseFloat(ReplaceLetra($("#MontoPago").val())) * TipodeCambio.TipoCambio,
                                    BIN: "",
                                    NumReferencia: "",
                                    NumCheque: "",
                                    Metodo: "Efectivo",
                                    Moneda: $("#selectMonedaP").val(),
                                    MonedaVuelto: $("#selectMonedaV").val(),
                                    PagadoCon: parseFloat(ReplaceLetra($("#PagadoCon").val()))
                                };
                                MetodosPagosAbonos.push(Detalle);

                                break;
                            }
                        case "Tarjeta":
                            {
                                var Detalle = {
                                    id: 0,
                                    idEncabezado: 0,
                                    idCuentaBancaria: $("#CuentaB").val(),
                                    Monto: parseFloat(ReplaceLetra($("#MontoPago").val())),

                                    //Monto: MonedaDoc != "COL" ? (Moneda != MonedaDoc ? parseFloat(ReplaceLetra($("#MontoPago").val())) / TipodeCambio.TipoCambio : parseFloat(ReplaceLetra($("#MontoPago").val())) * TipodeCambio.TipoCambio) : (Moneda != MonedaDoc ? parseFloat(ReplaceLetra($("#MontoPago").val())) * TipodeCambio.TipoCambio : parseFloat(ReplaceLetra($("#MontoPago").val())) / TipodeCambio.TipoCambio),

                                    BIN: $("#BINPago").val(),
                                    NumReferencia: $("#ReferenciaPago").val(),
                                    NumCheque: "",
                                    Metodo: "Tarjeta",
                                    Moneda: $("#selectMonedaP").val(),
                                    MonedaVuelto: "",
                                    PagadoCon: 0
                                };
                                MetodosPagosAbonos.push(Detalle);

                                break;
                            }
                        case "Transferencia":
                            {
                                var Detalle = {
                                    id: 0,
                                    idEncabezado: 0,
                                    idCuentaBancaria: $("#CuentaB").val(),
                                    Monto: parseFloat(ReplaceLetra($("#MontoPago").val())),
                                    BIN: "",
                                    NumReferencia: $("#ReferenciaPago").val(),
                                    NumCheque: "",
                                    Metodo: "Transferencia",
                                    Moneda: $("#selectMonedaP").val(),
                                    MonedaVuelto: "",
                                    PagadoCon: 0
                                };
                                MetodosPagosAbonos.push(Detalle);

                                break;
                            }
                        case "Cheque":
                            {
                                var Detalle = {
                                    id: 0,
                                    idEncabezado: 0,
                                    idCuentaBancaria: $("#CuentaB").val(),
                                    Monto: parseFloat(ReplaceLetra($("#MontoPago").val())),

                                    BIN: "",
                                    NumReferencia: "",
                                    NumCheque: $("#ChequePago").val(),
                                    Metodo: "Cheque",
                                    Moneda: $("#selectMonedaP").val(),
                                    MonedaVuelto: "",
                                    PagadoCon: 0
                                };
                                MetodosPagosAbonos.push(Detalle);
                                break;
                            }
                        case "Otros":
                            {
                                var Detalle = {
                                    id: 0,
                                    idEncabezado: 0,
                                    idCuentaBancaria: $("#CuentaB").val(),
                                    Monto: parseFloat(ReplaceLetra($("#MontoPago").val())),

                                    BIN: "",
                                    NumReferencia: "",
                                    NumCheque: "",
                                    Metodo: "Otros | " + $("#otroPago").val(),
                                    Moneda: $("#selectMonedaP").val(),
                                    MonedaVuelto: "",
                                    PagadoCon: 0
                                };
                                MetodosPagosAbonos.push(Detalle);

                                break;
                            }
                        case "Pago a Cuenta":
                            {
                                var Detalle = {
                                    id: 0,
                                    idEncabezado: 0,
                                    idCuentaBancaria: $("#CuentaB").val(),
                                    Monto: parseFloat(ReplaceLetra($("#MontoPago").val())),

                                    BIN: "",
                                    NumReferencia: "",
                                    NumCheque: $("#ReferenciaPago").val(),
                                    Metodo: "Pago a Cuenta",
                                    Moneda: $("#selectMonedaP").val(),
                                    MonedaVuelto: "",
                                    PagadoCon: 0
                                };
                                MetodosPagosAbonos.push(Detalle);

                                break;
                            }
                        default:
                            {

                                break;
                            }
                    }


                    $("#MetodoSeleccionado").val("0");
                    calcularPago();
                    onChangeMetodo();
                    RellenaTablaPagos();
                    LimpiarDatosPago();
                    RellenaCB();
                    $("#selectMonedaP").val($("#Moneda").val());
                } else {

                }


            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }
        function LimpiarDatosPago() {
            try {
                $("#PagadoCon").val(0);
                $("#otroPago").val("");
                $("#ChequePago").val("");
                $("#BINPago").val("");
                $("#ReferenciaPago").val("");

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }
        function validarMetodo() { // CAMBIAR
            try {
                var Metodo = $("#MetodoSeleccionado").val();

                var Moneda = $("#selectMonedaP").val();
                var Monto = parseFloat($("#MontoPago").val());
                var MonedaDoc = $("#Moneda").val();
                var TipodeCambio = TipoCambio.find(a => a.Moneda == "USD");

                var Total = MonedaDoc == "COL" ? parseFloat(ReplaceLetra($("#TotalGeneral").text())) - parseFloat(ReplaceLetra($("#pagPago").text())) : 0; //Total En Colones
                var TotalD = MonedaDoc != "COL" ? parseFloat(ReplaceLetra($("#TotalGeneral").text())) - parseFloat(ReplaceLetra($("#pagPagoD").text())) : 0;

                if (Total <= 0 && TotalD <= 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'No se puede ingresar montos mayores a lo pagado'

                    })
                    return false;
                }

                if (parseFloat($("#MontoPago").val()) > parseFloat(ReplaceLetra($("#fatPago").text())) && MonedaDoc == Moneda && MonedaDoc == "COL") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'No se puede ingresar montos mayores a lo faltante'

                    })
                    return false;
                }

                if (parseFloat($("#MontoPago").val()) > parseFloat(ReplaceLetra($("#fatPagoD").text())) && MonedaDoc == Moneda && MonedaDoc != "COL") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'No se puede ingresar montos mayores a lo faltante'

                    })
                    return false;
                }
                //if ((parseFloat($("#MontoPago").val()) * TipodeCambio.TipoCambio) > parseFloat(ReplaceLetra($("#fatPago").text())) && Moneda == "USD" && MonedaDoc == "COL") {
                //    Swal.fire({
                //        icon: 'error',
                //        title: 'Oops...',
                //        text: 'No se puede ingresar montos mayores a lo faltante'

                //    })
                //    return false;
                //}

                //if ((parseFloat($("#MontoPago").val()) / TipoCambio.TipoCambio) > parseFloat(ReplaceLetra($("#fatPago").text())) && Moneda == "COL" && MonedaDoc == "USD") {
                //    Swal.fire({
                //        icon: 'error',
                //        title: 'Oops...',
                //        text: 'No se puede ingresar montos mayores a lo faltante'

                //    })
                //    return false;
                //}

                if ($("#CuentaB").val() == "") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Falta la cuenta bancaria'

                    })
                    return false;
                }
                switch (Metodo) {
                    case "Efectivo":
                        {
                            if (parseFloat(ReplaceLetra($("#MontoPago").val())) <= 0 || $("#PagadoCon").val() == undefined || $("#PagadoCon").val() == 0 || $("#PagadoCon").val() < parseFloat(ReplaceLetra($("#MontoPago").val()))) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Parece que faltan datos por rellenar '

                                })
                                return false;
                            } else {
                                return true;
                            }


                            break;
                        }
                    case "Tarjeta":
                        {
                            if (parseFloat(ReplaceLetra($("#MontoPago").val())) <= 0 || $("#BINPago").val() == undefined || $("#BINPago").val() == "") {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Parece que faltan datos por rellenar '

                                })
                                return false;
                            } else if (parseFloat(ReplaceLetra($("#ReferenciaPago").val())) <= 0 || $("#ReferenciaPago").val() == undefined || $("#ReferenciaPago").val() == "") {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Parece que faltan datos por rellenar '

                                })
                                return false;
                            }
                            else {
                                return true;
                            }

                            break;
                        }
                    case "Transferencia":
                        {
                            if (parseFloat(ReplaceLetra($("#ReferenciaPago").val())) <= 0 || $("#ReferenciaPago").val() == undefined || $("#ReferenciaPago").val() == "") {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Parece que faltan datos por rellenar '

                                })
                                return false;
                            }
                            else {
                                return true;
                            }

                            break;
                        }
                    case "Cheque":
                        {
                            if (parseFloat(ReplaceLetra($("#MontoPago").val())) <= 0 || $("#ChequePago").val() == undefined || $("#ChequePago").val() == "") {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Parece que faltan datos por rellenar '

                                })
                                return false;
                            }
                            else {
                                return true;
                            }
                            break;
                        }
                    case "Otros":
                        {
                            if (parseFloat(ReplaceLetra($("#MontoPago").val())) <= 0 || $("#otroPago").val() == undefined || $("#otroPago").val() == "") {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Parece que faltan datos por rellenar '

                                })
                                return false;
                            }
                            else {
                                return true;
                            }

                            break;
                        }
                    default:
                        {
                            return true;
                            break;
                        }
                }

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }

        function RellenaTablaPagos() {
            try {
                var text = "";
                $("#tbodyPago").html(text);

                for (var i = 0; i < MetodosPagosAbonos.length; i++) {
                    text += "<tr>";
                    text += "<td class='text-center'> " + MetodosPagosAbonos[i].Metodo + " </td>";
                    text += "<td class='text-center'> " + MetodosPagosAbonos[i].BIN + " </td>";
                    text += "<td class='text-center'> " + MetodosPagosAbonos[i].NumReferencia + " </td>";
                    /*  text += "<td class='text-center'> " + MetodosPagosAbonos[i].NumCheque + " </td>";*/
                    text += "<td class='text-center'> " + MetodosPagosAbonos[i].Moneda + " </td>";
                    text += "<td class='text-rigth'> " + formatoDecimal(MetodosPagosAbonos[i].Monto) + " </td>";
                    text += "<td class='text-center'> <a class='fa fa-trash' onclick='javascript:EliminarPago(" + i + ") '> </a> </td>";
                    text += "</tr>";

                }

                $("#tbodyPago").html(text);


            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }


        function calcularPago() { //REVISAR
            try {

                var Faltante = 0;
                var FaltanteD = 0;
                var PagadoT = 0;
                var PagadoTD = 0;
                var Pagado = 0;
                var PagadoD = 0;
                var MonedaDoc = $("#Moneda").val();

                var Total = 0;// parseFloat(ReplaceLetra($("#TotalGeneral").text()));
                var TotalD = 0;
                var TipodeCambio = TipoCambio.find(a => a.Moneda == "USD");
                var vueltoT = 0;
                var vueltoTD = 0;
                var vuelto = 0;
                var vueltoD = 0;
                $("#vueltoPago").text(formatoDecimal(vuelto.toFixed(2)));
                $("#vueltoPagoD").text(formatoDecimal(vueltoD.toFixed(2)));


                if (MonedaDoc != "COL") {
                    TotalD = parseFloat(ReplaceLetra($("#TotalGeneral").text()));
                    Total = TotalD * TipodeCambio.TipoCambio;
                } else {
                    Total = parseFloat(ReplaceLetra($("#TotalGeneral").text()));
                    TotalD = Total / TipodeCambio.TipoCambio;
                }

                for (var i = 0; i < MetodosPagosAbonos.length; i++) {

                    // if (MetodosPagosAbonos[i].Moneda == MonedaDoc) {
                    if (MetodosPagosAbonos[i].Moneda != "COL") { // Moneda del Pago viene en USD

                        PagadoTD += MetodosPagosAbonos[i].Monto;
                        PagadoT += MetodosPagosAbonos[i].Monto * TipodeCambio.TipoCambio;

                        PagadoD += MetodosPagosAbonos[i].Monto;
                        //   Pagado += MetodosPagosAbonos[i].Monto * TipodeCambio.TipoCambio;
                        if (MetodosPagosAbonos[i].Metodo == "Efectivo") {

                            if (MetodosPagosAbonos[i].PagadoCon > 0) {

                                if (MetodosPagosAbonos[i].Moneda != MonedaDoc) { // SI USD = Moneda DOC
                                    vueltoTD += (MetodosPagosAbonos[i].PagadoCon) - MetodosPagosAbonos[i].Monto;
                                    vueltoT += ((MetodosPagosAbonos[i].PagadoCon) - MetodosPagosAbonos[i].Monto) * TipodeCambio.TipoCambio;

                                    vueltoD += (MetodosPagosAbonos[i].PagadoCon) - MetodosPagosAbonos[i].Monto;
                                } else {
                                    vueltoTD += MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto;
                                    vueltoT += (MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto) * TipodeCambio.TipoCambio;

                                    vueltoD += MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto;
                                }

                                // vuelto += (MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto) * TipodeCambio.TipoCambio;
                            }
                        }

                    } else {

                        PagadoT += MetodosPagosAbonos[i].Monto;
                        PagadoTD += MetodosPagosAbonos[i].Monto / TipodeCambio.TipoCambio;
                        Pagado += MetodosPagosAbonos[i].Monto;
                        // PagadoD += MetodosPagosAbonos[i].Monto / TipodeCambio.TipoCambio;

                        if (MetodosPagosAbonos[i].Metodo == "Efectivo") {

                            if (MetodosPagosAbonos[i].PagadoCon > 0) {
                                if (MetodosPagosAbonos[i].Moneda != MonedaDoc) {
                                    vueltoT += (MetodosPagosAbonos[i].PagadoCon) - MetodosPagosAbonos[i].Monto;
                                    vueltoTD += ((MetodosPagosAbonos[i].PagadoCon) - MetodosPagosAbonos[i].Monto) / TipodeCambio.TipoCambio;

                                    vuelto += (MetodosPagosAbonos[i].PagadoCon) - MetodosPagosAbonos[i].Monto;

                                } else {
                                    vueltoT += MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto;
                                    vueltoTD += (MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto) / TipodeCambio.TipoCambio;

                                    vuelto += MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto;
                                }

                                // vueltoD += (MetodosPagosAbonos[i].PagadoCon - MetodosPagosAbonos[i].Monto) / TipodeCambio.TipoCambio;
                            }
                        }
                    }


                }


                Faltante = Total - PagadoT;
                FaltanteD = TotalD - PagadoTD;

                $("#fatPago").text(formatoDecimal(Faltante));
                $("#pagPago").text(formatoDecimal(Pagado));
                $("#vueltoPago").text(formatoDecimal(vuelto));
                $("#vueltoPagoG").text(formatoDecimal(vueltoT));


                $("#fatPagoD").text(formatoDecimal(FaltanteD));
                $("#pagPagoD").text(formatoDecimal(PagadoD));
                $("#vueltoPagoD").text(formatoDecimal(vueltoD));
                $("#vueltoPagoGD").text(formatoDecimal(vueltoTD));



            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }

        function EliminarPago(i) {
            try {

                MetodosPagosAbonos.splice(i, 1);
                calcularPago();
                RellenaTablaPagos();

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Error ' + e

                })
            }
        }
        function onChangeMonedaP() {
            try {

                RellenaCB();
                var Moneda = $("#selectMonedaP").val(); //Moneda del pago
                var Monto = parseFloat($("#MontoPago").val()); //Monto que se pone el input
                var MonedaDoc = $("#Moneda").val(); //Moneda del documento
                var TipodeCambio = TipoCambio.find(a => a.Moneda == "USD");
                var Total = parseFloat(ReplaceLetra($("#TotalGeneral").text()));
                var Metodo = $("#MetodoSeleccionado").val();




                if (Metodo == "Efectivo") {

                    $("#PagadoCon").val(Monto);
                }


                if (Moneda != "COL") { //Si es USD
                    if (Moneda != MonedaDoc) {
                        var TotalC = Monto * TipodeCambio.TipoCambio;
                        $("#TotalC").val(TotalC); // lo pongo en colones
                        //var TotalD = Monto / TipodeCambio.TipoCambio; // Tptal en dolares
                        $("#TotalD").val(Monto);
                    } else {
                        var TotalC = Monto * TipodeCambio.TipoCambio; // Tptal en dolares
                        $("#TotalC").val(TotalC); // lo pongo en colones

                        $("#TotalD").val(Monto);
                    }


                } else { //La moneda que se escogio es colones

                    if (Moneda != MonedaDoc) {
                        $("#TotalC").val(Monto); // lo pongo en colones
                        var TotalD = Monto / TipodeCambio.TipoCambio; // Tptal en dolares
                        $("#TotalD").val(TotalD);

                    } else {
                        $("#TotalC").val(Monto); // lo pongo en colones
                        var TotalD = Monto / TipodeCambio.TipoCambio; // Tptal en dolares
                        $("#TotalD").val(TotalD);
                    }

                }




            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error al intentar imprimir ' + e

                })
            }
        }
    </script>
}






<div class="row">
    <div class=" col-md-12 col-sm-12 col-12">
        <div class="card">
            <div class="card-header p-4">
            
                <input hidden id="Detalle" value="@JsonConvert.SerializeObject(Model.Factura.DetFactura)" />
                <input hidden id="ProductosHijos" value="@JsonConvert.SerializeObject(Model.ProductosHijos)" />
                <input hidden id="ManoObra" value="@JsonConvert.SerializeObject(Model.ManoObra)" />
                <input hidden id="Impuestos" value="@JsonConvert.SerializeObject(Model.Impuestos)" />
                <input hidden id="ProductosHijosInsertar" value="@JsonConvert.SerializeObject(Model.ProductosHijosInsertar)" />
                <input hidden id="CB" value="@JsonConvert.SerializeObject(Model.CuentasBancarias)" />
                <input hidden id="Exoneraciones" value="@JsonConvert.SerializeObject(Model.Exoneraciones.Exoneraciones)" />
                <input hidden id="CondicionesPagos" value="@JsonConvert.SerializeObject(Model.Condiciones)" />







                <input hidden id="idGeneral" value="@Model.Factura.id" />



                <div class="float-right">
                    <h3 class="mb-0">Equipo Facturar #@Model.ItemCodeFacturar</h3>


                    Fecha: @Model.Factura.Fecha.ToString("dd/MMMM/yyyy")
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-sm-6">

                        @{
                            switch (Model.Factura.TipoDocumento)
                            {
                                case "01":
                                    {
                                        <h3 class="text-dark mb-1">Factura</h3>
                                        break;
                                    }

                            }
                        }

                        <div>CardCode: @Model.Factura.CardCode</div>
                        <div>Cliente: @Model.Factura.NombreCliente</div>
                        <br />
                        <div>Email: <input id="EmailCliente" class="form-control" type="email" value="@Model.Factura.Correo" /> </div>
                        <br />

                        <div>Identificación: <input id="CedulaCliente" asp-for="Factura.Cedula" class="form-control" type="text" /></div>
                        <br />

                        <div class="row col-sm-4">

                            <div class="form-group">
                                <label>Moneda</label>
                                <select id="Moneda" class="form-control" asp-for="Factura.Moneda" required onchange="javascript: ModificaMoneda()">
                                    <option value="COL" selected>Colones</option>
                                    <option value="USD">Dólares</option>

                                </select>

                            </div>
                        </div>
                        <div class="row col-sm-4">
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Condiciones de Pago:</label>
                                    <select id="condPago" class="form-control" required asp-for="Factura.idCondicionVenta">

                                        @foreach (var item in Model.Condiciones)
                                        {
                                            @if (item.Nombre.ToUpper().Contains("Contado".ToUpper()))
                                            {
                                                <option value="@item.id">@item.Nombre</option>

                                            }
                                            else if (item.codSAP == Model.Cliente.idCondPago)
                                            {
                                                <option value="@item.id">@item.Nombre</option>
                                            }
                                        }

                                    </select>

                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Plazo de Pago:</label>
                                    <select id="plazoPago" class="form-control" required asp-for="Factura.idPlazoCredito">


                                        @foreach (var item in Model.PlazosCreditos)
                                        {
                                            <option value="@item.id">@item.Nombre</option>
                                        }

                                    </select>

                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(Roles.Where(a => a == "78").FirstOrDefault()))
                        {
                            <button id="agregaManoObra" class="btn btn-rounded btn-outline-danger" style="margin-top: 27%;" onclick="javascript: MeterManoObra()"> <i class="fas fa-plus "></i> Mano De Obra</button>

                        }
                    </div>
                </div>

                <hr />
                @if (!string.IsNullOrEmpty(Roles.Where(a => a == "78").FirstOrDefault()))
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <label class="col-form-label">Agregar Productos:</label>
                            <div class="form-group row">


                                <label id="id" hidden style="line-height: 32px;">
                                </label>
                                <div class="col-sm-6">
                                    <input id="Busqueda" list="prodHijos" class="form-control" type="text" />
                                    <datalist id="prodHijos">
                                        @foreach (var item in Model.ProductosHijosInsertar.ToList())
                                        {
                                            <option value="@item.id _ @item.codSAP "> @item.codSAP - @item.Nombre </option>
                                        }
                                    </datalist>

                                </div>
                                <div class="col-sm-3">

                                    <button title="Buscar" type="submit" class="btn btn btn-primary" onclick="javascript: onChangeProducto();"> <i class="fa fa-search"></i></button>
                                </div>
                            </div>


                            <div class="row">
                                <div class="col-sm-4">

                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <label class="col-form-label">Nombre:</label>
                                        </div>
                                        <div class="col-sm-12">
                                            <label id="Nombre" style="line-height: 32px;">
                                            </label>

                                        </div>
                                    </div>




                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <label class="col-form-label">Stock:</label>
                                        </div>
                                        <div class="col-sm-12">
                                            <label id="cantidad" style="line-height: 32px;">
                                            </label>


                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-4" style="text-align: center;">

                                    <a title="Agregar" id="Agregar" onclick="javascript: InsertarProductoTabla();" style=" color: #fff; width: 25%;" class="btn btn-rounded btn-primary">+</a>
                                </div>


                            </div>

                        </div>
                    </div>
                    <div class="row">
                    </div>
                    <hr />
                }


                <div class="table-responsive-sm">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Acción</th>
                                <th>Producto</th>
                                <th class="center">Precio Unitario</th>
                                <th class="center">Cantidad</th>
                                <th class="center">Stock</th>
                                <th class="center">% Impuesto</th>

                                <th class="center">Impuestos</th>
                                <th class="center">Exoneracion</th>

                                <th class="center">% Descuento</th>

                                <th class="center">Descuentos</th>
                                <th class="center">Total</th>

                                <th class="center">% Ganancia</th>
                                <th class="center">% Ganancia Minima</th>



                            </tr>
                        </thead>
                        <tbody id="tbody">
                        </tbody>
                    </table>

                </div>

                <div class="row">
                    <div class="col-lg-4 col-sm-5">
                    </div>
                    <div class="col-lg-4 col-sm-5 ml-auto">
                        <table class="table table-clear">
                            <tbody>
                                <tr>
                                    <td align="left">
                                        <strong class="text-dark">Subtotal</strong>
                                    </td>
                                    <td align="right">
                                        <span class="moneda"></span>

                                        <strong style="font-weight: inherit;" id="SubtotalGeneral"></strong>
                                    </td>
                                </tr>
                                <tr>
                                    <td align="left">
                                        <strong class="text-dark">% Descuento</strong>
                                    </td>
                                    <td align="right"><input class="form-control input" value="0" type="number" step="1" id="descGeneral" onchange="javascript: ModificaTodo()"></td>
                                </tr>
                                <tr>
                                    <td align="left">
                                        <strong class="text-dark">Descuento</strong>
                                    </td>
                                    <td align="right">
                                        <span class="moneda"></span>

                                        <strong style="font-weight: inherit;" id="DescGeneral"></strong>
                                    </td>
                                </tr>
                                <tr>
                                    <td align="left">
                                        <strong class="text-dark">Impuestos</strong>
                                    </td>

                                    <td align="right">
                                        <span class="moneda"></span>

                                        <strong style="font-weight: inherit;" id="ImpGeneral"></strong>
                                    </td>
                                </tr>
                                <tr>
                                    <td align="left">
                                        <strong class="text-dark">Total</strong>
                                    </td>
                                    <td align="right">
                                        <span class="moneda"></span>
                                        <strong class="text-dark" id="TotalGeneral"></strong>
                                    </td>
                                </tr>

                            </tbody>
                        </table>
                    </div>
                </div>


                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Comentarios</label>

                        <textarea id="comentarios" maxlength="500" class="form-control" asp-for="Factura.Comentarios"></textarea>

                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
<br />


<!-- /.modal -->
&nbsp;
<button type="button" onclick="javascript: AbrirPago()" class="btn btn-rounded btn-outline-secondary" id="Guardar2">Guardar y Generar</button>


<!-- Modal -->
<div class="modal" data-backdrop="false" id="modalPagos" tabindex="-1">

    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="width: 100%; max-width: 200%;">



            <div class="modal-header">
                <h1 class="modal-title"> Gestión de Pagos </h1>




                <button type="button" class="close" data-dismiss="modal" style="margin: -3rem -2rem -1rem auto">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>





            <div class="modal-body">
                <div class="row">
                    <div class="col-md-10"><h5 class="modal-title">Métodos de Pago</h5> </div>
                    <div class="col-md-2"> <h5 class="modal-title" style="text-align: left;">Moneda Pago</h5></div>
                </div>

                <div class="row">

                    <div class="col-md-9">

                        <select id="MetodoSeleccionado" class="form-control" onchange="javascript: onChangeMetodo()">
                            <option value="0">Seleccione</option>

                            <option value="Efectivo">Efectivo</option>
                            <option value="Tarjeta">Tarjeta</option>
                            <option value="Transferencia">Transferencia</option>
                            @*<option value="Cheque">Cheque</option>*@
                            <option value="Pago a Cuenta">Pago a Cuenta</option>
                            @* <option value="Otros">Otros</option>*@



                        </select>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">

                            <select class="form-control" id="selectMonedaP" onchange="javascript: onChangeMonedaP()">

                                <option value="COL" selected>COL</option>


                                <option value="USD">USD</option>

                            </select>


                        </div>
                    </div>
                </div>

                <br />

                <div class="row MetodosPagoRellenar" id="">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Monto  </label>
                            <input type="number" class="form-control" id="MontoPago" placeholder="Monto Pagado" onchange="javascript: onChangeMonedaP();" value="1">


                        </div>


                    </div>


                    <div class="col-md-4 TARJETADIV">
                        <div class="form-group">
                            <label>BIN (últimos 4 números de la tarjeta)</label>
                            <input type="number" class="form-control" id="BINPago" placeholder="BIN">


                        </div>


                    </div>
                    <div class="col-md-4 TRANSFERENCIADIV">
                        <div class="form-group">
                            <label>Referencia Pago </label>
                            <input type="text" maxlength="10" class="form-control" id="ReferenciaPago" placeholder="Referencia bancaria">


                        </div>


                    </div>


                    <div class="col-md-4 CHEQUEDIV">
                        <div class="form-group">
                            <label>Cheque </label>
                            <input type="text" maxlength="50" class="form-control" id="ChequePago" placeholder="Cheque">


                        </div>


                    </div>
                    <div class="col-md-4 OTRODIV">
                        <div class="form-group">
                            <label>Nombre </label>
                            <input type="text" maxlength="50" class="form-control" id="otroPago" placeholder="Nombre del método">


                        </div>


                    </div>
                    <div class="col-md-4 EFECTIVODIV">
                        <div class="form-group">
                            <label>Paga con:  </label>
                            <input type="number" class="form-control" id="PagadoCon" placeholder="Monto Efectivo">


                        </div>


                    </div>
                    <div class="col-md-4 EFECTIVODIV">
                        <div class="form-group">
                            <label>Moneda Vuelto:  </label>
                            <select class="form-control" id="selectMonedaV">

                                <option value="COL" selected>COL</option>


                                <option value="USD">USD</option>

                            </select>


                        </div>
                    </div>
                    <div class="col-md-4 CUENTADIV">
                        <div class="form-group">

                            <label>Cuenta:  </label> <br />
                            <select class="form-control" id="CuentaB">
                            </select>


                        </div>


                    </div>


                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Total Colones:  </label>
                            <input type="number" class="form-control" disabled id="TotalC" placeholder="Total Colones">


                        </div>


                    </div>


                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Total Dólares:  </label>
                            <input type="number" class="form-control" disabled id="TotalD" placeholder="Total Dólares">


                        </div>


                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Tipo de Cambio:  </label>
                            <input type="number" readonly class="form-control" disabled id="TipCam" placeholder="Tipo Cambio">


                        </div>


                    </div>



                    <div class="col-sm-12 pl-1" style="text-align: right;">

                        <a id="agregarPago" onclick="javascript: insertarPago() " class="btn btn-primary" style="color: white !important;">+</a>
                    </div>

                </div>

                <br />
                <!-- Table row -->
                <div class="row">
                    <div class="col-12 table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>


                                    <th>Método</th>
                                    <th class="text-right">BIN</th>
                                    <th class="text-right">Referencia</th>
                                    <th class="text-right">Moneda</th>
                                    <th class="text-right">Total</th>
                                    <th class="text-right">Eliminar</th>

                                </tr>
                            </thead>
                            <tbody id="tbodyPago">
                            </tbody>
                        </table>
                    </div>
                    <!-- /.col -->
                </div>
                <!-- /.row -->
                <div class="row">

                    <div class="col-md-10">

                        <h5 class="modal-title" style="text-align: right;"><b>Colones</b></h5>


                    </div>
                    <div class="col-md-2"> <h5 class="modal-title" style="text-align: right;"><b>Dolares</b></h5></div>
                </div>
                <div class="row">
                    <!-- /.col -->
                    <div class="col-10 text-right">


                        <div>
                            <p>Total  : <span id="totPago">0</span> </p>
                            <p>Faltante  : <span id="fatPago">0</span></p>
                            <p>Pagado  : <span id="pagPago">0</span></p>


                        </div>
                        <div class="total-payment">
                            <h3><b>Vuelto :</b>  <span id="vueltoPago">0 </span></h3>
                        </div>

                        <div class="total-payment">
                            <h4><b>Vuelto General:</b>  <span id="vueltoPagoG">0 </span></h4>
                        </div>



                    </div>

                    <div class="col-2 text-right">


                        <div>
                            <p>Total  : <span id="totPagoD">0</span> </p>
                            <p>Faltante  : <span id="fatPagoD">0</span></p>
                            <p>Pagado  : <span id="pagPagoD">0</span></p>


                        </div>
                        <div class="total-payment">
                            <h3><b>Vuelto :</b>  <span id="vueltoPagoD">0 </span></h3>
                        </div>

                        <div class="total-payment">
                            <h4><b>Vuelto General:</b>  <span id="vueltoPagoGD">0 </span></h4>
                        </div>

                    </div>


                    <!-- /.col -->
                </div>
            </div>
            <div class="modal-footer">

                <button type="button" id="botonG" class="btn btn-bold btn-pure btn-primary float-right" onclick="javascript: Generar()">Generar</button>
            </div>
        </div>
    </div>
</div>
<!-- /.modal -->